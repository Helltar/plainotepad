  object SyntAnal84: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftColor
      end    
      item
        DisplayName = 'Identifier'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Reserved word'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Variable'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Code block'
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Code border'
        Font.Color = clWindow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'HTML'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Verdana'
      end    
      item
        DisplayName = 'Current Block'
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end    
      item
        DisplayName = 'Exec'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clSkyBlue
      end>
    TokenRules = <    
      item
        DisplayName = 'Code block start'
        StyleName = 'Code border'
        TokenType = 9
        Expression = '<\?(php)?'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Code block end'
        StyleName = 'Code border'
        TokenType = 10
        Expression = '\?>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)(["''])(\\\\|\\\1|.)*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String Heredoc'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)<<<(\w+)\z.+?\z\1;'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ | \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[0-9a-f]+ | 0b[01]+ | \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.\\]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[!/\+\-\*:=<>&/\|\^~\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Exec'
        StyleName = 'Exec'
        TokenType = 4
        Expression = '`.+?`'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'as'
              'break'
              'case'
              'class'
              'const'
              'continue'
              'default'
              'define'
              'defined'
              'do'
              'echo'
              'else'
              'elseif'
              'endfor'
              'endforeach'
              'endif'
              'endswitch'
              'endwhile'
              'exit'
              'extends'
              'for'
              'function'
              'gettype'
              'global'
              'if'
              'include'
              'include_once'
              'int'
              'isset'
              'old_function'
              'print'
              'private'
              'protected'
              'public'
              'pval'
              'require'
              'require_once'
              'return'
              'settype'
              'static'
              'string'
              'switch'
              'use'
              'var'
              'void'
              'while'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Code block start'
        StyleName = 'Code block'
        ConditionList = <        
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Code block end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Code block end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Begin'
        StyleName = 'Current Block'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'Begin'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'class'
        ConditionList = <        
          item
            TagList.Strings = (
              'class'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'class_end'
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'class_end'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function'
        BlockName = 'class'
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'function_end'
        EndOfTextClose = True
        NameFmt = '%s0~[(]1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        SelfClose = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function_end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function_without_class'
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'function_without_class_end'
        NameFmt = '%s0~[(]1'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function_without_class_end'
        BlockName = 'function_without_class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <    
      item
        DisplayName = 'HTML'
        StyleName = 'HTML'
        StartExpression = '\?>'
        EndExpression = '<\?'
        SyntAnalyzer = SyntAnal36
        FromTextBegin = True
      end>
    SampleText.Strings = (
      '<?php'
      ''
      'function ppp(int a){'
      '  $a = 10 + 12.2;'
      '  echo $a; '
      '  echo ''test''."\\";'
      '  if (a){'
      '  }'
      '}'
      ''
      'class f {'
      '  function a(){'
      '    if (a) { a++; }'
      '    i++;'
      '  }'
      '  function b(){'
      '  }'
      '}'
      ''
      'class ff extends f {'
      '  function a(){'
      '    i++;'
      '  }'
      ''
      '  function b(){'
      '    if (a>b) {'
      '      a++;'
      '    }'
      '  }'
      '}'
      ''
      'function pp(int a; int b){'
      '  i++;'
      '  if (a){'
      '  }'
      '}'
      ''
      '?>'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Code Start'
      'Code End'
    )
    Extentions = 'php'
    LexerName = 'PHP'
    Notes.Strings = (
      'Original: EControl'
      'Tree added by Matthias030 (SynWrite admin)'
      'Changes by Alexey (SynWrite)'
    )
    RestartFromLineStart = True
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end